---

## Prepare epel repo
- name: install epel repo
  yum: pkg={{ item }} update_cache=yes
  with_items:
    - epel-release

## Install depencency
- name: install depencency packages
  yum: pkg={{ item }} update_cache=yes
  with_items:
    - python-pip
    - httpd
    - net-snmp
    - perl
    - mod_wsgi
    - python-devel
    - gcc
    - gcc-c++
    - pytz
    - MySQL-python 
    - libffi-devel
    - python-cairocffi

## Install graphite
- name: copy graphite-requirements file
  copy: src=graphite-requirements dest=/var/tmp/graphite-requirements

- name: install graphite packages
  pip: 
    requirements: /var/tmp/graphite-requirements

# Ensure directory exist
- name: Ensure /opt/graphite permission
  file:
    path: /opt/graphite
    state: directory
    owner: apache
    group: apache
    recurse: true

- name: Ensure data dir exist
  file:
    path: "{{ data_dir }}"
    state: directory
    owner: apache
    group: apache
    recurse: true

- name: Ensure log dir exist
  file:
    path: "{{ log_dir }}"
    state: directory

- name: Ensure web log dir exist
  file:
    path: "{{ log_dir }}/webapp"
    state: directory
    owner: apache
    group: apache


## Graphite config
- name: copy carbon config to /opt/graphite/conf/
  template:
    src: carbon.conf.j2
    dest: /opt/graphite/conf/carbon.conf

## relay-rule config, will check relay_method, if relay_method!=rules, config blank
- name: copy relay-rule.conf to /opt/graphite/conf 
  template:
    src: relay-rules.conf.j2
    dest: /opt/graphite/conf/relay-rules.conf

## whisper config
- name: copy storage-schema.conf to /opt/graphite/conf 
  template:
    src: storage-schemas.conf.j2
    dest: /opt/graphite/conf/storage-schemas.conf

## Graphite web config
- name: copy graphite.wsgi to /opt/graphite/conf
  copy:
    src: graphite.wsgi
    dest: /opt/graphite/conf/graphite.wsgi

- name: copy graphTemplates.conf to /opt/graphite/conf
  copy:
    src: graphTemplates.conf
    dest: /opt/graphite/conf/graphTemplates.conf

- name: copy graphite-web-vhost.conf to /etc/httpd/conf.d/
  template:
    src: graphite-web-vhost.conf.j2
    dest: /etc/httpd/conf.d/graphite-web-vhost.conf

- name: copy graphite web local_settings.py to /opt/graphite/webapp/graphite/local_settings.py
  template:
    src: local_settings.py.j2
    dest: /opt/graphite/webapp/graphite/local_settings.py

## Init graphite DB when first_install == true
- name: Copy init script to /var/tmp
  template:
    src: init_graphite_db.sh.j2
    dest: /var/tmp/init_graphite_db.sh
    mode: 0755
  when:  (first_install  == true) 

- name: init graphite DB
  command: /bin/sh /var/tmp/init_graphite_db.sh
  when:  (first_install  == true) and (ansible_fqdn in graphite_bootstrap_server)

## Setting iptables to porting L4 metrics to realserver port
- iptables:
    table: nat
    destination: "{{ vip }}"
    destination_port: "{{ vip_port }}"
    chain: PREROUTING
    protocol: "{{ portocol }}"
    jump: REDIRECT
    to_ports: "{{ real_server_port }}"

## Also write iptable rule to /etc/rc.local
- name: Check LB setting in rc.local
  shell: cat /etc/rc.local |grep "{{ real_server_port }}" |wc -l
  register: LB_result

- name: add LB setting to rc.local
  lineinfile: dest=/etc/rc.local line="iptables -t nat -A PREROUTING -p {{ portocol }} -d {{ vip }} -j REDIRECT --dport {{ vip_port }} --to-port {{ real_server_port }}"
  when: LB_result.stdout == "0"


## Start/Stop service script
- name: copy carbon-cache systemcd file to /usr/lib/systemd/system/
  template:
    src: carbon-cache@.service.j2
    dest: /usr/lib/systemd/system/carbon-cache@.service

- name: copy carbon-relay systemcd file to /usr/lib/systemd/system/
  template:
    src: carbon-relay@.service.j2
    dest: /usr/lib/systemd/system/carbon-relay@.service

