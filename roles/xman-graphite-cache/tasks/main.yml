---

## Prepare epel repo
- name: install epel repo
  yum: 
    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    state: present

## Install depencency
- name: install depencency packages
  yum: pkg={{ item }} update_cache=yes
  with_items:
    - python-pip
    - httpd
    - net-snmp
    - perl
    - mod_wsgi
    - python-devel
    - gcc
    - gcc-c++
    - pytz
    - MySQL-python 
    - libffi-devel
    - python-cairocffi
    - openssl-devel

## Install graphite
- name: copy graphite-requirements file
  copy: src=graphite-requirements dest=/var/tmp/graphite-requirements

- name: install graphite packages
  pip: 
    requirements: /var/tmp/graphite-requirements

# Ensure directory exist
- name: Ensure /opt/graphite permission
  file:
    path: /opt/graphite
    state: directory
    owner: apache
    group: apache
    recurse: true

- name: Ensure data dir exist
  file:
    path: "{{ data_dir }}"
    state: directory
    owner: apache
    group: apache
    recurse: true

- name: Ensure log dir exist
  file:
    path: "{{ log_dir }}"
    state: directory

- name: Ensure web log dir exist
  file:
    path: "{{ log_dir }}/webapp"
    state: directory
    owner: apache
    group: apache

## Graphite config
- name: copy carbon config to /opt/graphite/conf/
  template:
    src: carbon/carbon.conf.j2
    dest: /opt/graphite/conf/carbon.conf

## relay-rule config, will check relay_method, if relay_method!=rules, config blank
- name: copy relay-rule.conf to /opt/graphite/conf 
  template:
    src: carbon/relay-rules.conf.j2
    dest: /opt/graphite/conf/relay-rules.conf

## whisper config
- name: copy storage-schema.conf to /opt/graphite/conf 
  template:
    src: carbon/storage-schemas.conf.j2
    dest: /opt/graphite/conf/storage-schemas.conf

## blacklist config
- name: copy graphite blacklist.conf to /opt/graphite/conf
  template:
    src: carbon/blacklist.conf.j2
    dest: /opt/graphite/conf/blacklist.conf

## storage-aggregation config
- name: copy graphite storage-aggregation.conf to /opt/graphite/conf
  template:
    src: carbon/storage-aggregation.conf.j2
    dest: /opt/graphite/conf/storage-aggregation.conf

## Graphite web config
- name: copy graphite.wsgi to /opt/graphite/conf
  copy:
    src: web/graphite.wsgi
    dest: /opt/graphite/conf/graphite.wsgi

- name: copy graphTemplates.conf to /opt/graphite/conf
  copy:
    src: web/graphTemplates.conf
    dest: /opt/graphite/conf/graphTemplates.conf

- name: copy graphite-web-vhost.conf to /etc/httpd/conf.d/
  template:
    src: web/graphite-web-vhost.conf.j2
    dest: /etc/httpd/conf.d/graphite-web-vhost.conf

- name: copy graphite web local_settings.py to /opt/graphite/webapp/graphite/local_settings.py
  template:
    src: web/local_settings.py.j2
    dest: /opt/graphite/webapp/graphite/local_settings.py

## Init graphite DB when first_install == true
- name: Copy init script to /var/tmp
  template:
    src: script/init_graphite_db.sh.j2
    dest: /var/tmp/init_graphite_db.sh
    mode: 0755
  when:  (first_install  == true) 

- name: init graphite DB
  command: /bin/sh /var/tmp/init_graphite_db.sh
  when:  (first_install  == true) and (ansible_fqdn in graphite_bootstrap_server)

##ã€€sysctl.conf
- name: copy sysctl config to /etc/
  template:
    src: sysctl.conf.j2
    dest: /etc/sysctl.conf


## Start/Stop service script
- name: copy carbon-cache systemcd file to /usr/lib/systemd/system/
  template:
    src: systemctl/carbon-cache@.service.j2
    dest: /usr/lib/systemd/system/carbon-cache@.service

- name: copy carbon-relay systemcd file to /usr/lib/systemd/system/
  template:
    src: systemctl/carbon-relay@.service.j2
    dest: /usr/lib/systemd/system/carbon-relay@.service

## Start firewalld 
- service:
    name: firewalld
    state: started

## carbon-relay port
- firewalld:
    port: 2103/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2104/tcp
    permanent: true
    state: enabled

## carbon-cache port
- firewalld:
    port: 2013/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2014/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2023/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2024/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2033/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2034/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2043/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2044/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2053/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2054/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2063/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2064/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2073/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 2074/tcp
    permanent: true
    state: enabled

## carbon query port
- firewalld:
    port: 7012/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 7022/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 7032/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 7042/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 7052/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 7062/tcp
    permanent: true
    state: enabled

- firewalld:
    port: 7072/tcp
    permanent: true
    state: enabled

## Graphiteweb
- firewalld:
    port: 80/tcp
    permanent: true
    state: enabled

## Reload firewalld
- name: Reload Firewalld
  command: firewall-cmd --reload

